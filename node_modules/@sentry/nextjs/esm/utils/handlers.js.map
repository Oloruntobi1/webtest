{"version":3,"file":"handlers.js","sourceRoot":"","sources":["../../src/utils/handlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { captureException, flush, getCurrentHub, Handlers, startTransaction, withScope } from '@sentry/node';\nimport { extractTraceparentData, getActiveTransaction, hasTracingEnabled } from '@sentry/tracing';\nimport { addExceptionMechanism, isString, logger, stripUrlQueryAndFragment } from '@sentry/utils';\nimport { NextApiHandler } from 'next';\n\nimport { addRequestDataToEvent, NextRequest } from './instrumentServer';\n\nconst { parseRequest } = Handlers;\n\n// purely for clarity\ntype WrappedNextApiHandler = NextApiHandler;\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const withSentry = (handler: NextApiHandler): WrappedNextApiHandler => {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  return async (req, res) => {\n    try {\n      const currentScope = getCurrentHub().getScope();\n\n      if (currentScope) {\n        currentScope.addEventProcessor(event => addRequestDataToEvent(event, req as NextRequest));\n\n        // We only want to record page and API requests\n        if (hasTracingEnabled()) {\n          // If there is a trace header set, extract the data from it (parentSpanId, traceId, and sampling decision)\n          let traceparentData;\n          if (req.headers && isString(req.headers['sentry-trace'])) {\n            traceparentData = extractTraceparentData(req.headers['sentry-trace'] as string);\n            logger.log(`[Tracing] Continuing trace ${traceparentData?.traceId}.`);\n          }\n\n          const url = `${req.url}`;\n          // pull off query string, if any\n          let reqPath = stripUrlQueryAndFragment(url);\n          // Replace with placeholder\n          if (req.query) {\n            for (const [key, value] of Object.entries(req.query)) {\n              reqPath = reqPath.replace(`${value}`, `[${key}]`);\n            }\n          }\n\n          // requests for pages will only ever be GET requests, so don't bother to include the method in the transaction\n          // name; requests to API routes could be GET, POST, PUT, etc, so do include it there\n          const namePrefix = `${(req.method || 'GET').toUpperCase()} `;\n\n          const transaction = startTransaction(\n            {\n              name: `${namePrefix}${reqPath}`,\n              op: 'http.server',\n              metadata: { requestPath: reqPath },\n              ...traceparentData,\n            },\n            // extra context passed to the `tracesSampler`\n            { request: req },\n          );\n          currentScope.setSpan(transaction);\n        }\n      }\n\n      return await handler(req, res); // Call Handler\n    } catch (e) {\n      withScope(scope => {\n        scope.addEventProcessor(event => {\n          addExceptionMechanism(event, {\n            handled: false,\n          });\n          return parseRequest(event, req);\n        });\n        captureException(e);\n      });\n      throw e;\n    } finally {\n      const transaction = getActiveTransaction();\n      if (transaction) {\n        transaction.setHttpStatus(res.statusCode);\n\n        // we'll collect this data in a more targeted way in the event processor we added above,\n        // `addRequestDataToEvent`\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        delete transaction.metadata.requestPath;\n\n        transaction.finish();\n      }\n      try {\n        await flush(2000);\n      } catch (e) {\n        // no-empty\n      }\n    }\n  };\n};\n"]}