import { SentryCliPluginOptions } from '@sentry/webpack-plugin';
import { NextConfig } from 'next/dist/next-server/server/config';
export declare const SERVER_SDK_INIT_PATH = "sentry/initServerSDK.js";
declare type PlainObject<T = any> = {
    [key: string]: T;
};
declare type WebpackExport = (config: WebpackConfig, options: WebpackOptions) => WebpackConfig;
declare type WebpackConfig = {
    devtool: string;
    plugins: PlainObject[];
    entry: EntryProperty;
    output: {
        filename: string;
        path: string;
    };
    target: string;
    context: string;
};
declare type WebpackOptions = {
    dev: boolean;
    isServer: boolean;
    buildId: string;
};
declare type EntryProperty = (() => Promise<EntryPropertyObject>) | EntryPropertyObject;
declare type EntryPropertyObject = PlainObject<string> | PlainObject<Array<string>> | PlainObject<EntryPointObject>;
declare type EntryPointObject = {
    import: string | Array<string>;
};
declare type NextConfigExports = Partial<NextConfig> & {
    productionBrowserSourceMaps?: boolean;
    webpack?: WebpackExport;
};
/**
 * Add Sentry options to the config to be exported from the user's `next.config.js` file.
 *
 * @param providedExports The existing config to be exported ,prior to adding Sentry
 * @param providedSentryWebpackPluginOptions Configuration for SentryWebpackPlugin
 * @returns The modified config to be exported
 */
export declare function withSentryConfig(providedExports?: Partial<NextConfig>, providedSentryWebpackPluginOptions?: Partial<SentryCliPluginOptions>): NextConfigExports;
export {};
//# sourceMappingURL=config.d.ts.map