{"version":3,"file":"index.server.js","sourceRoot":"","sources":["../src/index.server.ts"],"names":[],"mappings":";;AAAA,qDAAqD;AACrD,qCAAgE;AAEhE,6DAA4D;AAC5D,2DAA0D;AAE1D,6DAA0D;AAE1D,uDAA6B;AAE7B,gFAAgF;AAChF,kDAAkD;AAClD,uCAAiE;AAAxD,gCAAA,aAAa,CAAA;AAAE,oCAAA,iBAAiB,CAAA;AAEzC,2CAA2C;AAC3C,SAAgB,IAAI,CAAC,OAAsB;IACzC,IAAM,eAAe,GAAG,IAAI,iCAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IACzE,eAAe,CAAC,cAAc,EAAE,CAAC;IACjC,OAAO,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;IAClE,uEAAuE;IACvE,qBAAqB,CAAC,OAAO,CAAC,CAAC;IAC/B,0DAA0D;IAC1D,OAAO,CAAC,mBAAmB,GAAG,KAAK,CAAC;IAEpC,WAAQ,CAAC,OAAO,CAAC,CAAC;IAClB,qBAAc,CAAC,UAAA,KAAK;QAClB,KAAK,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;AACL,CAAC;AAbD,oBAaC;AAED,IAAM,wBAAwB,GAAG,eAAe,CAAC;AAEjD,IAAM,+BAA+B,GAAG,IAAI,4BAAa,CAAC;IACxD,QAAQ,EAAE,UAAA,KAAK;;QACb,KAAK,CAAC,QAAQ,SAAG,KAAK,CAAC,QAAQ,0CAAE,OAAO,CAAC,wBAAwB,EAAE,eAAe,CAAC,CAAC;QACpF,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC,CAAC;AAEH,SAAS,qBAAqB,CAAC,OAAsB;IACnD,IAAI,OAAO,CAAC,YAAY,EAAE;QACxB,OAAO,CAAC,YAAY,GAAG,iCAAc,CAAC,+BAA+B,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;KAC9F;SAAM;QACL,OAAO,CAAC,YAAY,GAAG,CAAC,+BAA+B,CAAC,CAAC;KAC1D;AACH,CAAC;AAED,yCAAkD;AAAzC,oCAAA,gBAAgB,CAAA;AACzB,6CAA8C;AAArC,gCAAA,UAAU,CAAA;AAEnB,qEAAqE;AACrE,mCAAgB,EAAE,CAAC","sourcesContent":["import { RewriteFrames } from '@sentry/integrations';\nimport { configureScope, init as nodeInit } from '@sentry/node';\n\nimport { instrumentServer } from './utils/instrumentServer';\nimport { MetadataBuilder } from './utils/metadataBuilder';\nimport { NextjsOptions } from './utils/nextjsOptions';\nimport { addIntegration } from './utils/userIntegrations';\n\nexport * from '@sentry/node';\n\n// Here we want to make sure to only include what doesn't have browser specifics\n// because or SSR of next.js we can only use this.\nexport { ErrorBoundary, withErrorBoundary } from '@sentry/react';\n\n/** Inits the Sentry NextJS SDK on node. */\nexport function init(options: NextjsOptions): void {\n  const metadataBuilder = new MetadataBuilder(options, ['nextjs', 'node']);\n  metadataBuilder.addSdkMetadata();\n  options.environment = options.environment || process.env.NODE_ENV;\n  // TODO capture project root and store in an env var for RewriteFrames?\n  addServerIntegrations(options);\n  // Right now we only capture frontend sessions for Next.js\n  options.autoSessionTracking = false;\n\n  nodeInit(options);\n  configureScope(scope => {\n    scope.setTag('runtime', 'node');\n  });\n}\n\nconst SOURCEMAP_FILENAME_REGEX = /^.*\\/\\.next\\//;\n\nconst defaultRewriteFramesIntegration = new RewriteFrames({\n  iteratee: frame => {\n    frame.filename = frame.filename?.replace(SOURCEMAP_FILENAME_REGEX, 'app:///_next/');\n    return frame;\n  },\n});\n\nfunction addServerIntegrations(options: NextjsOptions): void {\n  if (options.integrations) {\n    options.integrations = addIntegration(defaultRewriteFramesIntegration, options.integrations);\n  } else {\n    options.integrations = [defaultRewriteFramesIntegration];\n  }\n}\n\nexport { withSentryConfig } from './utils/config';\nexport { withSentry } from './utils/handlers';\n\n// wrap various server methods to enable error monitoring and tracing\ninstrumentServer();\n"]}