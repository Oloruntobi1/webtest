{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/utils/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { getSentryRelease } from '@sentry/node';\nimport { dropUndefinedKeys, logger } from '@sentry/utils';\nimport defaultWebpackPlugin, { SentryCliPluginOptions } from '@sentry/webpack-plugin';\nimport * as SentryWebpackPlugin from '@sentry/webpack-plugin';\nimport * as fs from 'fs';\nimport { NextConfig } from 'next/dist/next-server/server/config';\nimport * as path from 'path';\n\nconst SENTRY_CLIENT_CONFIG_FILE = './sentry.client.config.js';\nconst SENTRY_SERVER_CONFIG_FILE = './sentry.server.config.js';\n// this is where the transpiled/bundled version of `SENTRY_SERVER_CONFIG_FILE` will end up\nexport const SERVER_SDK_INIT_PATH = 'sentry/initServerSDK.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype PlainObject<T = any> = { [key: string]: T };\n\n// The function which is ultimately going to be exported from `next.config.js` under the name `webpack`\ntype WebpackExport = (config: WebpackConfig, options: WebpackOptions) => WebpackConfig;\n\n// The two arguments passed to the exported `webpack` function, as well as the thing it returns\ntype WebpackConfig = {\n  devtool: string;\n  plugins: PlainObject[];\n  entry: EntryProperty;\n  output: { filename: string; path: string };\n  target: string;\n  context: string;\n};\ntype WebpackOptions = { dev: boolean; isServer: boolean; buildId: string };\n\n// For our purposes, the value for `entry` is either an object, or a function which returns such an object\ntype EntryProperty = (() => Promise<EntryPropertyObject>) | EntryPropertyObject;\n// Each value in that object is either a string representing a single entry point, an array of such strings, or an\n// object containing either of those, along with other configuration options. In that third case, the entry point(s) are\n// listed under the key `import`.\ntype EntryPropertyObject = PlainObject<string> | PlainObject<Array<string>> | PlainObject<EntryPointObject>;\ntype EntryPointObject = { import: string | Array<string> };\n\n/**\n * Add a file to a specific element of the given `entry` webpack config property.\n *\n * @param entryProperty The existing `entry` config object\n * @param injectionPoint The key where the file should be injected\n * @param injectee The path to the injected file\n */\nconst _injectFile = (entryProperty: EntryPropertyObject, injectionPoint: string, injectee: string): void => {\n  // can be a string, array of strings, or object whose `import` property is one of those two\n  let injectedInto = entryProperty[injectionPoint];\n\n  // Sometimes especially for older next.js versions it happens we don't have an entry point\n  if (!injectedInto) {\n    // eslint-disable-next-line no-console\n    console.error(`[Sentry] Can't inject ${injectee}, no entrypoint is defined.`);\n    return;\n  }\n\n  // We inject the user's client config file after the existing code so that the config file has access to\n  // `publicRuntimeConfig`. See https://github.com/getsentry/sentry-javascript/issues/3485\n  if (typeof injectedInto === 'string') {\n    injectedInto = [injectedInto, injectee];\n  } else if (Array.isArray(injectedInto)) {\n    injectedInto = [...injectedInto, injectee];\n  } else {\n    let importVal: string | string[];\n\n    if (typeof injectedInto.import === 'string') {\n      importVal = [injectedInto.import, injectee];\n    } else {\n      importVal = [...injectedInto.import, injectee];\n    }\n\n    injectedInto = {\n      ...injectedInto,\n      import: importVal,\n    };\n  }\n\n  entryProperty[injectionPoint] = injectedInto;\n};\n\nconst injectSentry = async (origEntryProperty: EntryProperty, isServer: boolean): Promise<EntryPropertyObject> => {\n  // The `entry` entry in a webpack config can be a string, array of strings, object, or function. By default, nextjs\n  // sets it to an async function which returns the promise of an object of string arrays. Because we don't know whether\n  // someone else has come along before us and changed that, we need to check a few things along the way. The one thing\n  // we know is that it won't have gotten *simpler* in form, so we only need to worry about the object and function\n  // options. See https://webpack.js.org/configuration/entry-context/#entry.\n\n  let newEntryProperty = origEntryProperty;\n  if (typeof origEntryProperty === 'function') {\n    newEntryProperty = await origEntryProperty();\n  }\n  newEntryProperty = newEntryProperty as EntryPropertyObject;\n\n  // Add a new element to the `entry` array, we force webpack to create a bundle out of the user's\n  // `sentry.server.config.js` file and output it to `SERVER_INIT_LOCATION`. (See\n  // https://webpack.js.org/guides/code-splitting/#entry-points.) We do this so that the user's config file is run\n  // through babel (and any other processors through which next runs the rest of the user-provided code - pages, API\n  // routes, etc.). Specifically, we need any ESM-style `import` code to get transpiled into ES5, so that we can call\n  // `require()` on the resulting file when we're instrumenting the sesrver. (We can't use a dynamic import there\n  // because that then forces the user into a particular TS config.)\n  if (isServer) {\n    // slice off the final `.js` since webpack is going to add it back in for us, and we don't want to end up with\n    // `.js.js` as the extension\n    newEntryProperty[SERVER_SDK_INIT_PATH.slice(0, -3)] = SENTRY_SERVER_CONFIG_FILE;\n  }\n  // On the client, it's sufficient to inject it into the `main` JS code, which is included in every browser page.\n  else {\n    _injectFile(newEntryProperty, 'main', SENTRY_CLIENT_CONFIG_FILE);\n  }\n\n  return newEntryProperty;\n};\n\ntype NextConfigExports = Partial<NextConfig> & {\n  productionBrowserSourceMaps?: boolean;\n  webpack?: WebpackExport;\n};\n\n/**\n * Add Sentry options to the config to be exported from the user's `next.config.js` file.\n *\n * @param providedExports The existing config to be exported ,prior to adding Sentry\n * @param providedSentryWebpackPluginOptions Configuration for SentryWebpackPlugin\n * @returns The modified config to be exported\n */\nexport function withSentryConfig(\n  providedExports: Partial<NextConfig> = {},\n  providedSentryWebpackPluginOptions: Partial<SentryCliPluginOptions> = {},\n): NextConfigExports {\n  const defaultSentryWebpackPluginOptions = dropUndefinedKeys({\n    url: process.env.SENTRY_URL,\n    org: process.env.SENTRY_ORG,\n    project: process.env.SENTRY_PROJECT,\n    authToken: process.env.SENTRY_AUTH_TOKEN,\n    configFile: 'sentry.properties',\n    stripPrefix: ['webpack://_N_E/'],\n    urlPrefix: `~/_next`,\n    include: '.next/',\n    ignore: ['.next/cache', 'server/ssr-module-cache.js', 'static/*/_ssgManifest.js', 'static/*/_buildManifest.js'],\n  });\n\n  // warn if any of the default options for the webpack plugin are getting overridden\n  const sentryWebpackPluginOptionOverrides = Object.keys(defaultSentryWebpackPluginOptions)\n    .concat('dryrun')\n    .filter(key => key in providedSentryWebpackPluginOptions);\n  if (sentryWebpackPluginOptionOverrides.length > 0) {\n    logger.warn(\n      '[Sentry] You are overriding the following automatically-set SentryWebpackPlugin config options:\\n' +\n        `\\t${sentryWebpackPluginOptionOverrides.toString()},\\n` +\n        \"which has the possibility of breaking source map upload and application. This is only a good idea if you know what you're doing.\",\n    );\n  }\n\n  const newWebpackExport = (config: WebpackConfig, options: WebpackOptions): WebpackConfig => {\n    // if we're building server code, store the webpack output path as an env variable, so we know where to look for the\n    // webpack-processed version of `sentry.server.config.js` when we need it\n    if (config.target === 'node') {\n      const outputLocation = path.dirname(path.join(config.output.path, config.output.filename));\n      const serverSDKInitOutputPath = path.join(outputLocation, SERVER_SDK_INIT_PATH);\n      const projectDir = config.context;\n      setRuntimeEnvVars(projectDir, {\n        // ex: .next/server/sentry/initServerSdk.js\n        SENTRY_SERVER_INIT_PATH: path.relative(projectDir, serverSDKInitOutputPath),\n      });\n    }\n\n    let newConfig = config;\n\n    if (typeof providedExports.webpack === 'function') {\n      newConfig = providedExports.webpack(config, options);\n    }\n\n    // Ensure quality source maps in production. (Source maps aren't uploaded in dev, and besides, Next doesn't let you\n    // change this is dev even if you want to - see\n    // https://github.com/vercel/next.js/blob/master/errors/improper-devtool.md.)\n    if (!options.dev) {\n      newConfig.devtool = 'source-map';\n    }\n\n    // Tell webpack to inject user config files (containing the two `Sentry.init()` calls) into the appropriate output\n    // bundles. Store a separate reference to the original `entry` value to avoid an infinite loop. (In a synchronous\n    // world, `x = () => f(x)` is fine, because the dereferencing is guaranteed to happen before the assignment, meaning\n    // we know f will get the original value of x. But in an async world, if we do `x = async () => f(x)`, the\n    // assignment happens *before* the dereferencing, meaning f is passed the new value. In other words, in that\n    // scenario, the new value is defined in terms of itself, with predictably bad consequences. Theoretically this\n    // could also be fixed by using `bind`, but this is way simpler.)\n    const origEntryProperty = newConfig.entry;\n    newConfig.entry = () => injectSentry(origEntryProperty, options.isServer);\n\n    // Add the Sentry plugin, which uploads source maps to Sentry when not in dev\n    newConfig.plugins.push(\n      // TODO it's not clear how to do this better, but there *must* be a better way\n      new ((SentryWebpackPlugin as unknown) as typeof defaultWebpackPlugin)({\n        dryRun: options.dev,\n        release: getSentryRelease(options.buildId),\n        ...defaultSentryWebpackPluginOptions,\n        ...providedSentryWebpackPluginOptions,\n      }),\n    );\n\n    return newConfig;\n  };\n\n  return {\n    ...providedExports,\n    productionBrowserSourceMaps: true,\n    webpack: newWebpackExport,\n  };\n}\n\n/**\n * Set variables to be added to the env at runtime, by storing them in `.env.local` (which `next` automatically reads\n * into memory at server startup).\n *\n * @param projectDir The path to the project root\n * @param vars Object containing vars to set\n */\nfunction setRuntimeEnvVars(projectDir: string, vars: PlainObject<string>): void {\n  // ensure the file exists\n  const envFilePath = path.join(projectDir, '.env.local');\n  if (!fs.existsSync(envFilePath)) {\n    fs.writeFileSync(envFilePath, '');\n  }\n\n  let fileContents = fs\n    .readFileSync(envFilePath)\n    .toString()\n    .trim();\n\n  Object.entries(vars).forEach(entry => {\n    const [varName, value] = entry;\n    const envVarString = `${varName}=${value}`;\n\n    // new entry\n    if (!fileContents.includes(varName)) {\n      fileContents = `${fileContents}\\n${envVarString}`;\n    }\n    // existing entry; make sure value is up to date\n    else {\n      fileContents = fileContents.replace(new RegExp(`${varName}=\\\\S+`), envVarString);\n    }\n  });\n\n  fs.writeFileSync(envFilePath, `${fileContents.trim()}\\n`);\n}\n"]}