var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var node_1 = require("@sentry/node");
var tracing_1 = require("@sentry/tracing");
var utils_1 = require("@sentry/utils");
var instrumentServer_1 = require("./instrumentServer");
var parseRequest = node_1.Handlers.parseRequest;
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
exports.withSentry = function (handler) {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    return function (req, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var currentScope, traceparentData, url, reqPath, _a, _b, _c, key, value, namePrefix, transaction, e_1, transaction, e_2;
        var e_3, _d;
        var _e;
        return tslib_1.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _f.trys.push([0, 2, 3, 8]);
                    currentScope = node_1.getCurrentHub().getScope();
                    if (currentScope) {
                        currentScope.addEventProcessor(function (event) { return instrumentServer_1.addRequestDataToEvent(event, req); });
                        // We only want to record page and API requests
                        if (tracing_1.hasTracingEnabled()) {
                            traceparentData = void 0;
                            if (req.headers && utils_1.isString(req.headers['sentry-trace'])) {
                                traceparentData = tracing_1.extractTraceparentData(req.headers['sentry-trace']);
                                utils_1.logger.log("[Tracing] Continuing trace " + ((_e = traceparentData) === null || _e === void 0 ? void 0 : _e.traceId) + ".");
                            }
                            url = "" + req.url;
                            reqPath = utils_1.stripUrlQueryAndFragment(url);
                            // Replace with placeholder
                            if (req.query) {
                                try {
                                    for (_a = tslib_1.__values(Object.entries(req.query)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                        _c = tslib_1.__read(_b.value, 2), key = _c[0], value = _c[1];
                                        reqPath = reqPath.replace("" + value, "[" + key + "]");
                                    }
                                }
                                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                                finally {
                                    try {
                                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                                    }
                                    finally { if (e_3) throw e_3.error; }
                                }
                            }
                            namePrefix = (req.method || 'GET').toUpperCase() + " ";
                            transaction = node_1.startTransaction(tslib_1.__assign({ name: "" + namePrefix + reqPath, op: 'http.server', metadata: { requestPath: reqPath } }, traceparentData), 
                            // extra context passed to the `tracesSampler`
                            { request: req });
                            currentScope.setSpan(transaction);
                        }
                    }
                    return [4 /*yield*/, handler(req, res)];
                case 1: return [2 /*return*/, _f.sent()]; // Call Handler
                case 2:
                    e_1 = _f.sent();
                    node_1.withScope(function (scope) {
                        scope.addEventProcessor(function (event) {
                            utils_1.addExceptionMechanism(event, {
                                handled: false,
                            });
                            return parseRequest(event, req);
                        });
                        node_1.captureException(e_1);
                    });
                    throw e_1;
                case 3:
                    transaction = tracing_1.getActiveTransaction();
                    if (transaction) {
                        transaction.setHttpStatus(res.statusCode);
                        // we'll collect this data in a more targeted way in the event processor we added above,
                        // `addRequestDataToEvent`
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                        delete transaction.metadata.requestPath;
                        transaction.finish();
                    }
                    _f.label = 4;
                case 4:
                    _f.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, node_1.flush(2000)];
                case 5:
                    _f.sent();
                    return [3 /*break*/, 7];
                case 6:
                    e_2 = _f.sent();
                    return [3 /*break*/, 7];
                case 7: return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    }); };
};
//# sourceMappingURL=handlers.js.map